// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// basil_dense__
List basil_dense__(const Eigen::Map<Eigen::MatrixXd> A, const Eigen::Map<Eigen::VectorXd> r, double s, const Eigen::Map<Eigen::VectorXd> user_lmdas, size_t max_n_lambdas, size_t n_lambdas_iter, size_t strong_size, size_t delta_strong_size, size_t max_strong_size, size_t max_n_cds, double thr, double min_ratio, size_t n_threads);
RcppExport SEXP _ghostbasil_basil_dense__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP user_lmdasSEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP strong_sizeSEXP, SEXP delta_strong_sizeSEXP, SEXP max_strong_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type user_lmdas(user_lmdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< size_t >::type strong_size(strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_strong_size(delta_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_strong_size(max_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(basil_dense__(A, r, s, user_lmdas, max_n_lambdas, n_lambdas_iter, strong_size, delta_strong_size, max_strong_size, max_n_cds, thr, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// basil_block_dense__
List basil_block_dense__(SEXP A, const Eigen::Map<Eigen::VectorXd> r, double s, const Eigen::Map<Eigen::VectorXd> user_lmdas, size_t max_n_lambdas, size_t n_lambdas_iter, size_t strong_size, size_t delta_strong_size, size_t max_strong_size, size_t max_n_cds, double thr, double min_ratio, size_t n_threads);
RcppExport SEXP _ghostbasil_basil_block_dense__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP user_lmdasSEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP strong_sizeSEXP, SEXP delta_strong_sizeSEXP, SEXP max_strong_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type user_lmdas(user_lmdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< size_t >::type strong_size(strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_strong_size(delta_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_strong_size(max_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(basil_block_dense__(A, r, s, user_lmdas, max_n_lambdas, n_lambdas_iter, strong_size, delta_strong_size, max_strong_size, max_n_cds, thr, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// basil_ghost__
List basil_ghost__(SEXP A, const Eigen::Map<Eigen::VectorXd> r, double s, const Eigen::Map<Eigen::VectorXd> user_lmdas, size_t max_n_lambdas, size_t n_lambdas_iter, size_t strong_size, size_t delta_strong_size, size_t max_strong_size, size_t max_n_cds, double thr, double min_ratio, size_t n_threads);
RcppExport SEXP _ghostbasil_basil_ghost__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP user_lmdasSEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP strong_sizeSEXP, SEXP delta_strong_sizeSEXP, SEXP max_strong_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type user_lmdas(user_lmdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< size_t >::type strong_size(strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_strong_size(delta_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_strong_size(max_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(basil_ghost__(A, r, s, user_lmdas, max_n_lambdas, n_lambdas_iter, strong_size, delta_strong_size, max_strong_size, max_n_cds, thr, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// basil_block_ghost__
List basil_block_ghost__(SEXP A, const Eigen::Map<Eigen::VectorXd> r, double s, const Eigen::Map<Eigen::VectorXd> user_lmdas, size_t max_n_lambdas, size_t n_lambdas_iter, size_t strong_size, size_t delta_strong_size, size_t max_strong_size, size_t max_n_cds, double thr, double min_ratio, size_t n_threads);
RcppExport SEXP _ghostbasil_basil_block_ghost__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP user_lmdasSEXP, SEXP max_n_lambdasSEXP, SEXP n_lambdas_iterSEXP, SEXP strong_sizeSEXP, SEXP delta_strong_sizeSEXP, SEXP max_strong_sizeSEXP, SEXP max_n_cdsSEXP, SEXP thrSEXP, SEXP min_ratioSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type user_lmdas(user_lmdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_lambdas(max_n_lambdasSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_lambdas_iter(n_lambdas_iterSEXP);
    Rcpp::traits::input_parameter< size_t >::type strong_size(strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type delta_strong_size(delta_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_strong_size(max_strong_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_n_cds(max_n_cdsSEXP);
    Rcpp::traits::input_parameter< double >::type thr(thrSEXP);
    Rcpp::traits::input_parameter< double >::type min_ratio(min_ratioSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(basil_block_ghost__(A, r, s, user_lmdas, max_n_lambdas, n_lambdas_iter, strong_size, delta_strong_size, max_strong_size, max_n_cds, thr, min_ratio, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// objective_sparse__
List objective_sparse__(const Eigen::Map<Eigen::MatrixXd> A, const Eigen::Map<Eigen::VectorXd> r, double s, double lmda, const Eigen::Map<Eigen::SparseMatrix<double>> beta);
RcppExport SEXP _ghostbasil_objective_sparse__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP lmdaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lmda(lmdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_sparse__(A, r, s, lmda, beta));
    return rcpp_result_gen;
END_RCPP
}
// objective_dense__
List objective_dense__(const Eigen::Map<Eigen::MatrixXd> A, const Eigen::Map<Eigen::VectorXd> r, double s, double lmda, const Eigen::Map<Eigen::VectorXd> beta);
RcppExport SEXP _ghostbasil_objective_dense__(SEXP ASEXP, SEXP rSEXP, SEXP sSEXP, SEXP lmdaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lmda(lmdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_dense__(A, r, s, lmda, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_group_coeffs__
List update_group_coeffs__(const Eigen::Map<Eigen::VectorXd> L, const Eigen::Map<Eigen::VectorXd> v, double lmda, double s, double tol, size_t max_iters);
RcppExport SEXP _ghostbasil_update_group_coeffs__(SEXP LSEXP, SEXP vSEXP, SEXP lmdaSEXP, SEXP sSEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type L(LSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type lmda(lmdaSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(update_group_coeffs__(L, v, lmda, s, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_core_module();

static const R_CallMethodDef CallEntries[] = {
    {"_ghostbasil_basil_dense__", (DL_FUNC) &_ghostbasil_basil_dense__, 13},
    {"_ghostbasil_basil_block_dense__", (DL_FUNC) &_ghostbasil_basil_block_dense__, 13},
    {"_ghostbasil_basil_ghost__", (DL_FUNC) &_ghostbasil_basil_ghost__, 13},
    {"_ghostbasil_basil_block_ghost__", (DL_FUNC) &_ghostbasil_basil_block_ghost__, 13},
    {"_ghostbasil_objective_sparse__", (DL_FUNC) &_ghostbasil_objective_sparse__, 5},
    {"_ghostbasil_objective_dense__", (DL_FUNC) &_ghostbasil_objective_dense__, 5},
    {"_ghostbasil_update_group_coeffs__", (DL_FUNC) &_ghostbasil_update_group_coeffs__, 6},
    {"_rcpp_module_boot_core_module", (DL_FUNC) &_rcpp_module_boot_core_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ghostbasil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

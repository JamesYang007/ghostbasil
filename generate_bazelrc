#!/usr/bin/env python3

import os
import subprocess
from sys import platform

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
OUT_PATH = os.path.join(ROOT_DIR, ".bazelrc")


def run_cmd(cmd):
    try:
        output = subprocess.check_output(
            cmd.split(" "), stderr=subprocess.STDOUT
        ).decode()
    except subprocess.CalledProcessError as e:
        output = e.output.decode()
        raise RuntimeError(output)
    return output.rstrip()


def main():
    with open(OUT_PATH, "w") as f:
        # MacOS
        if platform == "darwin":
            f.write(
                f"""
# These flags are needed to enable openmp
# Note: -Xclang has to come RIGHT BEFORE -fopenmp
build --cxxopt=-Xclang 
build --cxxopt=-fopenmp
build --linkopt=-Xclang 
build --linkopt=-fopenmp
build --linkopt=-lomp
# Tell Bazel not to use the full Xcode toolchain on Mac OS
build --repo_env=BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
"""
            )
        else:
            # Linux
            f.write(
                """
# Linux GCC
build:gcc --action_env=CC=gcc
build:gcc --action_env=CXX=g++

# Linux Clang (default)
build --action_env=CC=clang
build --action_env=CXX=clang++
build --cxxopt=-fopenmp
build --linkopt=-fopenmp
"""
            )

        # ORDER MATTERS!
        # Now write the common configs
        f.write(
            """
build --cxxopt=-std=c++14
build --cxxopt=-Wall

# ASAN build
# TODO: add ubsan + msan builds also
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -DADDRESS_SANITIZER
build:asan --copt -O1
build:asan --copt -g
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

build:prof --cxxopt=-fno-omit-frame-pointer
build:prof --linkopt=-lprofiler"""
        )


if __name__ == "__main__":
    main()
